@page "/blog"
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

@* Projeto Smoke Express - Autores: Bruno Bueno e Matheus Esposto *@

<h3 class="mb-4">Conteúdo exclusivo Smoke Express</h3>

<p class="text-muted">Artigos pensados para fortalecer a presença orgânica da marca e educar o público sobre produtos de tabacaria premium.</p>

@if (!string.IsNullOrEmpty(_mensagemErro))
{
    <div class="alert alert-danger" role="alert">@_mensagemErro</div>
}
else if (_carregando)
{
    <p>Carregando artigos...</p>
}
else if (_posts.Count == 0)
{
    <div class="alert alert-info" role="alert">
        Ainda não publicamos conteúdos. Em breve traremos novidades para alimentar nosso crescimento orgânico.
    </div>
}
else
{
    <div class="row g-4">
        @foreach (var post in _posts)
        {
            <div class="col-md-6">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@post.Titulo</h5>
                        <h6 class="card-subtitle mb-2 text-muted">
                            Por @(post.Autor?.NomeCompleto ?? post.Autor?.Email) em @post.DataPublicacao.ToLocalTime().ToString("dd/MM/yyyy")
                        </h6>
                        <p class="card-text flex-grow-1">@ObterResumo(post.Conteudo)</p>
                        <a class="btn btn-outline-primary mt-3" href="@($"/blog/{post.Slug}")">Ler artigo completo</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private readonly List<BlogPost> _posts = new();
    private bool _carregando = true;
    private string? _mensagemErro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var publicados = await DbContext.BlogPosts
                .Where(p => p.Publicado)
                .Include(p => p.Autor)
                .AsNoTracking()
                .OrderByDescending(p => p.DataPublicacao)
                .ToListAsync();

            _posts.AddRange(publicados);
        }
        catch (Exception ex)
        {
            _mensagemErro = $"Não foi possível carregar os artigos: {ex.Message}";
        }
        finally
        {
            _carregando = false;
        }
    }

    private static string ObterResumo(string conteudo)
    {
        if (string.IsNullOrWhiteSpace(conteudo))
        {
            return "Conteúdo em breve.";
        }

        var textoPlano = conteudo.Replace("<", " ").Replace(">", " ");
        return textoPlano.Length > 200
            ? textoPlano[..200] + "..."
            : textoPlano;
    }
}

